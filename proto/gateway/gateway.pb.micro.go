// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/gateway/gateway.proto

package proto_gateway_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GateWay service

type GateWayService interface {
	Service(ctx context.Context, in *Call, opts ...client.CallOption) (*CallRsp, error)
}

type gateWayService struct {
	c    client.Client
	name string
}

func NewGateWayService(name string, c client.Client) GateWayService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto.gateway.service"
	}
	return &gateWayService{
		c:    c,
		name: name,
	}
}

func (c *gateWayService) Service(ctx context.Context, in *Call, opts ...client.CallOption) (*CallRsp, error) {
	req := c.c.NewRequest(c.name, "GateWay.Service", in)
	out := new(CallRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GateWay service

type GateWayHandler interface {
	Service(context.Context, *Call, *CallRsp) error
}

func RegisterGateWayHandler(s server.Server, hdlr GateWayHandler, opts ...server.HandlerOption) error {
	type gateWay interface {
		Service(ctx context.Context, in *Call, out *CallRsp) error
	}
	type GateWay struct {
		gateWay
	}
	h := &gateWayHandler{hdlr}
	return s.Handle(s.NewHandler(&GateWay{h}, opts...))
}

type gateWayHandler struct {
	GateWayHandler
}

func (h *gateWayHandler) Service(ctx context.Context, in *Call, out *CallRsp) error {
	return h.GateWayHandler.Service(ctx, in, out)
}
